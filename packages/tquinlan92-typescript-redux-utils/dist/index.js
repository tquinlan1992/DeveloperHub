"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var typescript_fsa_1 = require("typescript-fsa");
function createReducer(initialState, actions) {
    return function (state, incomingAction) {
        if (state === void 0) { state = initialState; }
        var actionMatch = lodash_1.find(actions, function (action) {
            return typescript_fsa_1.isType(incomingAction, action.actionCreator);
        });
        if (actionMatch) {
            return actionMatch.reducer(state, incomingAction.payload);
        }
        else {
            return state;
        }
    };
}
exports.createReducer = createReducer;
function makeActionCreatorWithReducer(name, reducer) {
    var SimpleActionCreator = typescript_fsa_1.default();
    return {
        actionCreator: SimpleActionCreator(name),
        reducer: reducer
    };
}
exports.makeActionCreatorWithReducer = makeActionCreatorWithReducer;
function getCreators(creators) {
    return lodash_1.mapValues(creators, "actionCreator");
}
exports.getCreators = getCreators;
function makeActionCreatorWithReducerWithPrefix(actionName, reducer) {
    return function (reducerName) { return makeActionCreatorWithReducer(JSON.stringify({ reducerName: reducerName, actionName: actionName }), reducer); };
}
exports.makeActionCreatorWithReducerWithPrefix = makeActionCreatorWithReducerWithPrefix;
function getReducersFromCombinedActionReducer(creators) {
    return lodash_1.mapValues(creators, "reducer");
}
exports.getReducersFromCombinedActionReducer = getReducersFromCombinedActionReducer;
function getActionsFromCombinedActionReducer(creators) {
    return lodash_1.mapValues(creators, "actions");
}
exports.getActionsFromCombinedActionReducer = getActionsFromCombinedActionReducer;
function getActionsAndReducersFromCombinedActionReducer(creators) {
    return {
        actions: getActionsFromCombinedActionReducer(creators),
        reducers: getReducersFromCombinedActionReducer(creators)
    };
}
exports.getActionsAndReducersFromCombinedActionReducer = getActionsAndReducersFromCombinedActionReducer;
function testRunner(reducer) {
    return function (initalState, action) {
        return reducer(initalState, action);
    };
}
exports.testRunner = testRunner;
exports.default = {};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGlDQUF5QztBQUN6QyxpREFBZ0c7QUFjaEcsU0FBZ0IsYUFBYSxDQUFZLFlBQXVCLEVBQUUsT0FBaUQ7SUFDL0csT0FBTyxVQUFDLEtBQStCLEVBQUUsY0FBaUM7UUFBbEUsc0JBQUEsRUFBQSxvQkFBK0I7UUFDbkMsSUFBTSxXQUFXLEdBQUcsYUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFBLE1BQU07WUFDcEMsT0FBTyx1QkFBTSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEQsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLFdBQVcsRUFBRTtZQUNiLE9BQU8sV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzdEO2FBQU07WUFDSCxPQUFPLEtBQUssQ0FBQztTQUNoQjtJQUNMLENBQUMsQ0FBQztBQUNOLENBQUM7QUFYRCxzQ0FXQztBQU1ELFNBQWdCLDRCQUE0QixDQUEwQixJQUFZLEVBQUUsT0FBa0Q7SUFDbEksSUFBTSxtQkFBbUIsR0FBRyx3QkFBb0IsRUFBRSxDQUFDO0lBQ25ELE9BQU87UUFDSCxhQUFhLEVBQUUsbUJBQW1CLENBQWUsSUFBSSxDQUFDO1FBQ3RELE9BQU8sU0FBQTtLQUNWLENBQUM7QUFDTixDQUFDO0FBTkQsb0VBTUM7QUFFRCxTQUFnQixXQUFXLENBQTZELFFBQVc7SUFDL0YsT0FBTyxrQkFBUyxDQUFDLFFBQVEsRUFBRSxlQUFlLENBQThDLENBQUM7QUFDN0YsQ0FBQztBQUZELGtDQUVDO0FBRUQsU0FBZ0Isc0NBQXNDLENBQTBCLFVBQWtCLEVBQUUsT0FBa0Q7SUFDbEosT0FBTyxVQUFDLFdBQW9CLElBQUssT0FBQSw0QkFBNEIsQ0FBMEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLFdBQVcsYUFBQSxFQUFFLFVBQVUsWUFBQSxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsRUFBM0csQ0FBMkcsQ0FBQztBQUNqSixDQUFDO0FBRkQsd0ZBRUM7QUFXRCxTQUFnQixvQ0FBb0MsQ0FBaUQsUUFBVztJQUM1RyxPQUFPLGtCQUFTLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBd0MsQ0FBQztBQUNqRixDQUFDO0FBRkQsb0ZBRUM7QUFFRCxTQUFnQixtQ0FBbUMsQ0FBaUQsUUFBVztJQUMzRyxPQUFPLGtCQUFTLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBd0MsQ0FBQztBQUNqRixDQUFDO0FBRkQsa0ZBRUM7QUFXRCxTQUFnQiw4Q0FBOEMsQ0FBMEMsUUFBa0I7SUFDdEgsT0FBTztRQUNILE9BQU8sRUFBRSxtQ0FBbUMsQ0FBQyxRQUFRLENBQXNEO1FBQzNHLFFBQVEsRUFBRSxvQ0FBb0MsQ0FBQyxRQUFRLENBQXNEO0tBQ2hILENBQUM7QUFDTixDQUFDO0FBTEQsd0dBS0M7QUFFRCxTQUFnQixVQUFVLENBQWUsT0FBZ0I7SUFDckQsT0FBTyxVQUFDLFdBQXlCLEVBQUUsTUFBaUI7UUFDaEQsT0FBTyxPQUFPLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQztBQUNOLENBQUM7QUFKRCxnQ0FJQztBQUVELGtCQUFlLEVBRWQsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZpbmQsIG1hcFZhbHVlcyB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgYWN0aW9uQ3JlYXRvckZhY3RvcnksIHsgaXNUeXBlLCBBY3Rpb24sIEFueUFjdGlvbiwgQWN0aW9uQ3JlYXRvciB9IGZyb20gXCJ0eXBlc2NyaXB0LWZzYVwiO1xuaW1wb3J0IHsgUmVkdWNlciB9IGZyb20gJ3JlZHV4JztcblxuZXhwb3J0IHsgQWN0aW9uLCBBbnlBY3Rpb24sIEFjdGlvbkNyZWF0b3IgfTtcblxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25DcmVhdG9yV2l0aFJlZHVjZXI8U3RhdGVUeXBlPiB7XG4gICAgYWN0aW9uQ3JlYXRvcjogQWN0aW9uQ3JlYXRvcjxhbnk+O1xuICAgIHJlZHVjZXI6IChzdGF0ZTogU3RhdGVUeXBlLCBhY3Rpb246IGFueSkgPT4gU3RhdGVUeXBlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkNyZWF0b3JXaXRoUmVkdWNlckdyb3VwPFN0YXRlVHlwZT4ge1xuICAgIFtrZXk6IHN0cmluZ106IEFjdGlvbkNyZWF0b3JXaXRoUmVkdWNlcjxTdGF0ZVR5cGU+O1xufVxuIFxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJlZHVjZXI8U3RhdGVUeXBlPihpbml0aWFsU3RhdGU6IFN0YXRlVHlwZSwgYWN0aW9uczogQWN0aW9uQ3JlYXRvcldpdGhSZWR1Y2VyR3JvdXA8U3RhdGVUeXBlPikge1xuICAgIHJldHVybiAoc3RhdGU6IFN0YXRlVHlwZSA9IGluaXRpYWxTdGF0ZSwgaW5jb21pbmdBY3Rpb246IEFjdGlvbjxBbnlBY3Rpb24+KTogU3RhdGVUeXBlID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uTWF0Y2ggPSBmaW5kKGFjdGlvbnMsIGFjdGlvbiA9PiB7XG4gICAgICAgICAgICByZXR1cm4gaXNUeXBlKGluY29taW5nQWN0aW9uLCBhY3Rpb24uYWN0aW9uQ3JlYXRvcik7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYWN0aW9uTWF0Y2gpIHtcbiAgICAgICAgICAgIHJldHVybiBhY3Rpb25NYXRjaC5yZWR1Y2VyKHN0YXRlLCBpbmNvbWluZ0FjdGlvbi5wYXlsb2FkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGVUeXBlUmVkdWNlcjxTdGF0ZVR5cGUsIEFjdGlvblBhcmFtcz4ge1xuICAgIChzdGF0ZTogU3RhdGVUeXBlLCBhY3Rpb246IEFjdGlvblBhcmFtcyk6IFN0YXRlVHlwZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VBY3Rpb25DcmVhdG9yV2l0aFJlZHVjZXI8U3RhdGVUeXBlLCBBY3Rpb25QYXJhbXM+KG5hbWU6IHN0cmluZywgcmVkdWNlcjogU3RhdGVUeXBlUmVkdWNlcjxTdGF0ZVR5cGUsIEFjdGlvblBhcmFtcz4pIHtcbiAgICBjb25zdCBTaW1wbGVBY3Rpb25DcmVhdG9yID0gYWN0aW9uQ3JlYXRvckZhY3RvcnkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhY3Rpb25DcmVhdG9yOiBTaW1wbGVBY3Rpb25DcmVhdG9yPEFjdGlvblBhcmFtcz4obmFtZSksXG4gICAgICAgIHJlZHVjZXJcbiAgICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q3JlYXRvcnM8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogQWN0aW9uQ3JlYXRvcldpdGhSZWR1Y2VyPGFueT4gfT4oY3JlYXRvcnM6IFQpOiB7IFtQIGluIGtleW9mIFRdOiBUW1BdWydhY3Rpb25DcmVhdG9yJ10gfSB7XG4gICAgcmV0dXJuIG1hcFZhbHVlcyhjcmVhdG9ycywgXCJhY3Rpb25DcmVhdG9yXCIpIGFzIHsgW1AgaW4ga2V5b2YgVF06IFRbUF1bJ2FjdGlvbkNyZWF0b3InXSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUFjdGlvbkNyZWF0b3JXaXRoUmVkdWNlcldpdGhQcmVmaXg8U3RhdGVUeXBlLCBBY3Rpb25QYXJhbXM+KGFjdGlvbk5hbWU6IHN0cmluZywgcmVkdWNlcjogU3RhdGVUeXBlUmVkdWNlcjxTdGF0ZVR5cGUsIEFjdGlvblBhcmFtcz4pIHtcbiAgICByZXR1cm4gKHJlZHVjZXJOYW1lPzogc3RyaW5nKSA9PiBtYWtlQWN0aW9uQ3JlYXRvcldpdGhSZWR1Y2VyPFN0YXRlVHlwZSwgQWN0aW9uUGFyYW1zPihKU09OLnN0cmluZ2lmeSh7IHJlZHVjZXJOYW1lLCBhY3Rpb25OYW1lIH0pLCByZWR1Y2VyKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTaW1wbGVBbmRUaHVua0FjdGlvbnMge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBY3Rpb25zQW5kUmVkdWNlciB7XG4gICAgYWN0aW9ucz86IFNpbXBsZUFuZFRodW5rQWN0aW9ucztcbiAgICByZWR1Y2VyPzogUmVkdWNlcjxhbnksIEFueUFjdGlvbj47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSZWR1Y2Vyc0Zyb21Db21iaW5lZEFjdGlvblJlZHVjZXI8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogQWN0aW9uc0FuZFJlZHVjZXIgfT4oY3JlYXRvcnM6IFQpOiB7IFtQIGluIGtleW9mIFRdOiBUW1BdWydyZWR1Y2VyJ10gfSB7XG4gICAgcmV0dXJuIG1hcFZhbHVlcyhjcmVhdG9ycywgXCJyZWR1Y2VyXCIpIGFzIHsgW1AgaW4ga2V5b2YgVF06IFRbUF1bJ3JlZHVjZXInXSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWN0aW9uc0Zyb21Db21iaW5lZEFjdGlvblJlZHVjZXI8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogQWN0aW9uc0FuZFJlZHVjZXIgfT4oY3JlYXRvcnM6IFQpOiB7IFtQIGluIGtleW9mIFRdOiBUW1BdWydhY3Rpb25zJ10gfSB7XG4gICAgcmV0dXJuIG1hcFZhbHVlcyhjcmVhdG9ycywgXCJhY3Rpb25zXCIpIGFzIHsgW1AgaW4ga2V5b2YgVF06IFRbUF1bJ2FjdGlvbnMnXSB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbnNBbmRSZWR1Y2VyU2V0dXAge1xuICAgIFtrZXk6IHN0cmluZ106IEFjdGlvbnNBbmRSZWR1Y2VyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbnNSZWR1Y2Vyc0Zyb21Db21iaW5lZEFjdGlvblJlZHVjZXI8QWN0aW9uc1JlZHVjZXJzSW5zdGFuY2VzIGV4dGVuZHMgQWN0aW9uc0FuZFJlZHVjZXJTZXR1cD4ge1xuICAgIGFjdGlvbnM6IHsgW1AgaW4ga2V5b2YgQWN0aW9uc1JlZHVjZXJzSW5zdGFuY2VzXTogQWN0aW9uc1JlZHVjZXJzSW5zdGFuY2VzW1BdWydhY3Rpb25zJ10gfTtcbiAgICByZWR1Y2VyczogeyBbUCBpbiBrZXlvZiBBY3Rpb25zUmVkdWNlcnNJbnN0YW5jZXNdOiBBY3Rpb25zUmVkdWNlcnNJbnN0YW5jZXNbUF1bJ3JlZHVjZXInXSB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWN0aW9uc0FuZFJlZHVjZXJzRnJvbUNvbWJpbmVkQWN0aW9uUmVkdWNlcjxDcmVhdG9ycyBleHRlbmRzIEFjdGlvbnNBbmRSZWR1Y2VyU2V0dXA+KGNyZWF0b3JzOiBDcmVhdG9ycyk6IEFjdGlvbnNSZWR1Y2Vyc0Zyb21Db21iaW5lZEFjdGlvblJlZHVjZXI8Q3JlYXRvcnM+IHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhY3Rpb25zOiBnZXRBY3Rpb25zRnJvbUNvbWJpbmVkQWN0aW9uUmVkdWNlcihjcmVhdG9ycykgYXMgeyBbUCBpbiBrZXlvZiBDcmVhdG9yc106IENyZWF0b3JzW1BdWydhY3Rpb25zJ10gfSxcbiAgICAgICAgcmVkdWNlcnM6IGdldFJlZHVjZXJzRnJvbUNvbWJpbmVkQWN0aW9uUmVkdWNlcihjcmVhdG9ycykgYXMgeyBbUCBpbiBrZXlvZiBDcmVhdG9yc106IENyZWF0b3JzW1BdWydyZWR1Y2VyJ10gfVxuICAgIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0UnVubmVyPFJlZHVjZXJTdGF0ZT4ocmVkdWNlcjogUmVkdWNlcikge1xuICAgIHJldHVybiAoaW5pdGFsU3RhdGU6IFJlZHVjZXJTdGF0ZSwgYWN0aW9uOiBBbnlBY3Rpb24pID0+IHtcbiAgICAgICAgcmV0dXJuIHJlZHVjZXIoaW5pdGFsU3RhdGUsIGFjdGlvbik7XG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuXG59O1xuIl19
