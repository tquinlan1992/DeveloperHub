{"version":3,"sources":["webpack:///./components/TreeView/index.tsx"],"names":[],"mappings":"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","file":"main.d139c50bc856ddbe7dae.hot-update.js","sourcesContent":["import * as React from \"react\";\nimport { List, ListItem, ListItemIcon, ListItemText, ListSubheader, Checkbox, Button } from \"@material-ui/core\";\nimport FolderIcon from '@material-ui/icons/Folder';\nimport { onParentClickActionReducer, onBackClickActionReducer, onTagClickActionReducer, setRootStateActionReducer } from './reducer';\nimport { \n    Folder, \n    Tag, \n    TreeViewState, \n    OnTagClick, \n    OnFolderClick, \n    GetListForTagsFolders, \n    GetTagListItem, \n    GetFolderListItem, \n    TreeViewProps,\n    GetTagListItems,\n    GetFolderListeItems,\n    GetParentInfo\n} from \"./types\";\nimport * as exportTypes from './exportTypes';\nexport { exportTypes };\nimport { find } from 'lodash';\n\nfunction getFolderListItem({ folder, onParentClick }: GetFolderListItem) {\n    return (\n        <ListItem key={folder._id} onClick={() => onParentClick({ _id: folder._id })} button>\n            <ListItemIcon>\n                <FolderIcon />\n            </ListItemIcon>\n            <ListItemText\n                primary={folder.name}\n            />\n        </ListItem>\n    );\n}\n\nfunction getTagListItem({ tag, onTagClick, checked }: GetTagListItem) {\n    return (\n        <ListItem\n            key={tag._id}\n            button\n        >\n            <Checkbox\n                checked={checked}\n                tabIndex={-1}\n                disableRipple\n                onChange={(event: any, checked: boolean) => onTagClick({ _id: tag._id, checked })}\n            />\n            <ListItemText primary={tag.name} />\n        </ListItem>\n    );\n}\n\nfunction getTagListItems({ tagsFolders, currentlySelectedTags, onTagClick }: GetTagListItems) {\n    const tags = tagsFolders.filter(tagFolder => {\n        return !tagFolder.isFolder;\n    }) as Tag[];\n    return tags.map(tag => {\n        const checked = currentlySelectedTags.includes(tag._id);\n        return getTagListItem({ tag, onTagClick, checked });\n    });\n}\n\nfunction getFolderListItems({ tagsFolders, onParentClick }: GetFolderListeItems) {\n    const folders = tagsFolders.filter(tagFolder => {\n        return tagFolder.isFolder;\n    }) as Folder[];\n    return folders.map(folder => {\n        return getFolderListItem({ folder, onParentClick });\n    });\n}\n\nfunction getParentName({ tagsFolders, parent }: GetParentInfo) {\n    if (!parent) {\n        return \"Root:\";\n    }\n    const parentInfo = find(tagsFolders, tagFolder => {\n        return tagFolder._id === parent;\n    });\n    console.log('parentInfo', parentInfo);\n    return parentInfo ? parentInfo.name : \"no folder name\";\n}\n\nfunction getListForTagsFolders({ tagsFolders, parent, onTagClick, currentlySelectedTags, onParentClick }: GetListForTagsFolders) {\n\n    const folderListItems = getFolderListItems({tagsFolders, onParentClick});\n\n    const tagListItems = getTagListItems({tagsFolders, currentlySelectedTags, onTagClick });\n    const subheader =\n        <ListSubheader component=\"div\">\n            {parent}\n        </ListSubheader>;\n    return (\n        <List component=\"nav\" subheader={subheader}>\n            {folderListItems}\n            {tagListItems}\n        </List>\n    );\n}\nexport class TreeView extends React.Component<TreeViewProps, TreeViewState> {\n\n    constructor(props: any) {\n        super(props);\n        const action = setRootStateActionReducer.actionCreator({ tagsFolders: this.props.tagsFolders, selectedTags: this.props.selectedTags }).payload;\n        const newState = setRootStateActionReducer.reducer(null, action) as TreeViewState;\n        this.state = newState;\n    }\n\n    onTagClick({ _id, checked }: OnTagClick) {\n        const action = onTagClickActionReducer.actionCreator({ _id, checked }).payload;\n        const newState = onTagClickActionReducer.reducer(this.state, action);\n        this.props.onTagSelectionChange(newState.currentlySelectedTags);\n        this.setState(newState);\n    }\n\n    onParentClick({ _id }: OnFolderClick) {\n        const action = onParentClickActionReducer.actionCreator({ _id, tagsFolders: this.props.tagsFolders }).payload;\n        const newState = onParentClickActionReducer.reducer(this.state, action);\n        this.setState(newState);\n    }\n\n    onBackClick() {\n        const action = onBackClickActionReducer.actionCreator({ tagsFolders: this.props.tagsFolders }).payload;\n        const newState = onBackClickActionReducer.reducer(this.state, action);\n        this.setState(newState);\n    }\n\n    render() {\n        const backButton = !this.state.currentParent ? null :\n            <Button onClick={this.onBackClick.bind(this)}>\n                Back\n            </Button>;\n        const parent = getParentName({ tagsFolders: this.props.tagsFolders, parent: this.state.currentParent });\n        return (\n            <div>\n                {backButton}\n                {getListForTagsFolders({\n                    tagsFolders: this.state.currentTagsFolder,\n                    parent,\n                    onTagClick: this.onTagClick.bind(this),\n                    onParentClick: this.onParentClick.bind(this),\n                    currentlySelectedTags: this.state.currentlySelectedTags\n                })}\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}